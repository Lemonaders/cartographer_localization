编译：catkin_make_isolated --install --use-ninja

方案一：修改文件说明
	1、node_main.cc：				添加了initpose的订阅，通过callback实现trajectories以新位姿的重新启动。
	2、occupancy_grid_node_main：	添加了标志位，在launch中设置参数来决定是否发布地图更新。
	3、添加了	  map.launch
				localization.launch
				map.lua
				localization.lua

方案二：文件修改说明：
	1、/src/cartographer/cartographer/cartographer/mapping/pose_graph_interface.h  		添加纯虚函数GlobalPositioningTest()
	2、/src/cartographer/cartographer/cartographer/mapping/internal/2d/pose_graph_2d.h  添加函数声明GlobalPositioningTest()
	3、/src/cartographer/cartographer/cartographer/mapping/internal/2d/pose_graph_2d.cc 编写函数实现
	4、/src/cartographer_ros/cartographer_ros/cartographer_ros/map_builder_bridge.h     编写GlobalPositioningTest函数调用接口
	5、/src/cartographer_ros/cartographer_ros/cartographer_ros/map_builder_bridge.cc    编写GlobalPositioningTest函数调用接口
	6、/src/cartographer/cartographer/mapping/internal/3d/pose_graph_3d.h				仅供虚函数实现，3d中函数无意义*
	7、/src/cartographer/cartographer/mapping/internal/3d/pose_graph_3d.cc				仅供虚函数实现，3d中函数无意义*
	8、/src/cartographer_ros/cartographer_ros/cartographer_ros/node.h					写入点云缓存与点云获取函数
	9、/src/cartographer_ros/cartographer_ros/cartographer_ros/node.cc					写入点云缓存与点云获取函数
	10、/install_isolated/include/cartographer下mapping和sensor文件夹下复制了internal      避免posegraph2d编译错误



TODO:	（一）限制并发全图匹配的子图数量。
			当子图数量过多时，内存消耗会非常大，改为每次只对有限数量的子图进行匹配，可以是cpu核心数量。
			前一轮的 N 副子图匹配得到的 score 还能作为下一轮子图匹配的 cutoff，有效利用分支定界的特点加速重定位。

		（二）完成---------提供大概的先验位置减少需要匹配的子图数量。
			重定位就可以只搜索用户指定位置半径3米内的子图.

		（三）建图优化
			避免建图路径的交叉，防止同一位置的submap过于集中导致的匹配时间过长。

		（四）定位建图参数优化
			充分了解lua文件各参数含义，参数调优以优化性能。

		（五）尝试优化
			尝试将submap匹配器与scan匹配过程加快，是否因为资源竞争导致的匹配速度慢？是否因为线程优先级不够导致的速度较慢？

		（六）重定位点云更新
			目前点云回调只在重启时缓存一帧，如果在开机后机器人发生移动，缓存点云信息便会失去实时性，
			尝试initpose回调中重启点云回调，或者直接读取实时点云信息。

		（七）写死参数注意
			pose_graph_2d.cc
			114  double search_submap_range = 10.0; //m
			该参数限制了检测子图范围，为内定参数，后期可想办法暴露至lua中设置